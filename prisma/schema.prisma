// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// AUTHENTICATION & USER MANAGEMENT
// ============================================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified Boolean   @default(false)
  name          String?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  projects      Project[]
  
  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
}

enum UserRole {
  USER
  ADMIN
}

// ============================================
// PORTFOLIO PROJECTS
// ============================================

model Project {
  id          String   @id @default(cuid())
  slug        String   @unique
  
  // Multilingual content
  titleEn     String
  titleNl     String?
  titleFr     String?
  
  descriptionEn String   @db.Text
  descriptionNl String?  @db.Text
  descriptionFr String?  @db.Text
  
  contentEn   String?  @db.Text
  contentNl   String?  @db.Text
  contentFr   String?  @db.Text
  
  // Project details
  featured    Boolean  @default(false)
  published   Boolean  @default(false)
  order       Int      @default(0)
  
  // Media
  thumbnail   String
  images      String[]
  
  // Links
  liveUrl     String?
  githubUrl   String?
  
  // Metadata
  technologies String[]
  category    ProjectCategory?
  clientName  String?
  completedAt DateTime?
  
  // SEO
  metaDescription String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@index([slug])
  @@index([published, featured])
  @@index([authorId])
}

enum ProjectCategory {
  WEB_APP
  ECOMMERCE
  LANDING_PAGE
  MOBILE_APP
  API
  OTHER
}

// ============================================
// BLOG SYSTEM
// ============================================

model Post {
  id          String   @id @default(cuid())
  slug        String   @unique
  
  // Multilingual content
  titleEn     String
  titleNl     String?
  titleFr     String?
  
  excerptEn   String?  @db.Text
  excerptNl   String?  @db.Text
  excerptFr   String?  @db.Text
  
  contentEn   String   @db.Text
  contentNl   String?  @db.Text
  contentFr   String?  @db.Text
  
  // Publishing
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  publishedAt DateTime?
  
  // Media
  coverImage  String?
  
  // SEO
  metaDescription String?
  
  // Engagement
  views       Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Relations
  categories  PostCategory[]
  tags        Tag[]
  
  @@index([slug])
  @@index([published, publishedAt])
  @@index([authorId])
}

model PostCategory {
  id          String   @id @default(cuid())
  
  nameEn      String
  nameNl      String?
  nameFr      String?
  slug        String   @unique
  
  descriptionEn String?
  descriptionNl String?
  descriptionFr String?
  
  posts       Post[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([slug])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  posts     Post[]
  
  createdAt DateTime @default(now())
  
  @@index([slug])
}

// ============================================
// CONTACT & LEADS
// ============================================

model ContactSubmission {
  id          String   @id @default(cuid())
  
  name        String
  email       String
  phone       String?
  company     String?
  subject     String?
  message     String   @db.Text
  
  // Project inquiry details
  budget      String?
  timeline    String?
  projectType String?
  
  // Status
  status      ContactStatus @default(NEW)
  notes       String?       @db.Text
  
  // Spam protection
  ipAddress   String?
  userAgent   String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([status, createdAt])
  @@index([email])
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  RESPONDED
  CONVERTED
  SPAM
  ARCHIVED
}

// ============================================
// SITE SETTINGS & CONFIGURATION
// ============================================

model SiteSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String   @db.Text
  description String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([key])
}

// ============================================
// ANALYTICS (Optional - for simple tracking)
// ============================================

model PageView {
  id        String   @id @default(cuid())
  path      String
  locale    String?
  referer   String?
  userAgent String?
  ipAddress String?
  
  createdAt DateTime @default(now())
  
  @@index([path, createdAt])
  @@index([createdAt])
}